pipeline {
    agent any

    stages {
        stage('Detect Changes') {
            steps {
                script {
                    echo "üîç Ki·ªÉm tra xem kho l∆∞u tr·ªØ c√≥ ph·∫£i l√† shallow kh√¥ng..."
                    // Ki·ªÉm tra xem kho l∆∞u tr·ªØ c√≥ ph·∫£i l√† shallow repository kh√¥ng
                    def isShallow = sh(script: "git rev-parse --is-shallow-repository", returnStdout: true).trim()
                    echo "‚è≥ Kho l∆∞u tr·ªØ c√≥ ph·∫£i shallow kh√¥ng? ${isShallow}"

                    // N·∫øu l√† shallow, th·ª±c hi·ªán fetch to√†n b·ªô l·ªãch s·ª≠ commit
                    if (isShallow == "true") {
                        echo "üìÇ Kho l∆∞u tr·ªØ l√† shallow. ƒêang l·∫•y to√†n b·ªô l·ªãch s·ª≠..."
                        sh 'git fetch origin main --prune --unshallow'
                    } else {
                        echo "‚úÖ Kho l∆∞u tr·ªØ ƒë√£ ƒë·∫ßy ƒë·ªß. B·ªè qua b∆∞·ªõc --unshallow."
                        sh 'git fetch origin main --prune'
                    }

                    // Fetch t·∫•t c·∫£ c√°c nh√°nh ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t
                    echo "üìÇ ƒêang fetch t·∫•t c·∫£ c√°c nh√°nh..."
                    sh 'git fetch --all --prune'

                    // Ki·ªÉm tra xem nh√°nh main c√≥ t·ªìn t·∫°i kh√¥ng
                    echo "üîç Ki·ªÉm tra xem nh√°nh origin/main c√≥ t·ªìn t·∫°i kh√¥ng..."
                    def mainExists = sh(script: "git branch -r | grep 'origin/main' || echo ''", returnStdout: true).trim()

                    // N·∫øu kh√¥ng t·ªìn t·∫°i, th√™m nh√°nh origin/main v√† fetch l·∫°i
                    if (!mainExists) {
                        echo "‚ùå origin/main kh√¥ng t·ªìn t·∫°i trong remote. ƒêang fetch t·∫•t c·∫£ nh√°nh..."
                        sh 'git remote set-branches --add origin main'
                        sh 'git fetch --all'

                        mainExists = sh(script: "git branch -r | grep 'origin/main' || echo ''", returnStdout: true).trim()

                        // N·∫øu sau khi fetch v·∫´n kh√¥ng c√≥ nh√°nh main, b√°o l·ªói
                        if (!mainExists) {
                            error("‚ùå origin/main v·∫´n kh√¥ng t·ªìn t·∫°i! H√£y ki·ªÉm tra nh√°nh n√†y tr√™n remote.")
                        }
                    }

                    // L·∫•y commit base ƒë·ªÉ so s√°nh v·ªõi commit hi·ªán t·∫°i
                    def baseCommit = sh(script: "git merge-base origin/main HEAD", returnStdout: true).trim()
                    echo "üîç Commit base: ${baseCommit}"

                    // Ki·ªÉm tra commit base c√≥ h·ª£p l·ªá kh√¥ng
                    if (!baseCommit) {
                        error("‚ùå Kh√¥ng t√¨m th·∫•y commit base!")
                    }

                    // L·∫•y danh s√°ch c√°c file thay ƒë·ªïi t·ª´ commit base
                    def changes = sh(script: "git diff --name-only ${baseCommit} HEAD", returnStdout: true).trim()

                    echo "üìú C√°c file thay ƒë·ªïi:\n${changes}"

                    // N·∫øu kh√¥ng c√≥ thay ƒë·ªïi n√†o, b·ªè qua b∆∞·ªõc build v√† test
                    if (!changes) {
                        echo "‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi. B·ªè qua test & build."
                        SERVICES_CHANGED = ""
                        return
                    }

                    // Chuy·ªÉn danh s√°ch file thay ƒë·ªïi th√†nh m·∫£ng
                    def changedFiles = changes.split("\n")

                    // Chu·∫©n h√≥a l·∫°i c√°c ƒë∆∞·ªùng d·∫´n c·ªßa file ƒë·ªÉ ph√π h·ª£p v·ªõi t√™n c√°c d·ªãch v·ª•
                    def normalizedChanges = changedFiles.collect { file ->
                        file.replaceFirst("^.*?/spring-petclinic-microservices/", "")
                    }

                    echo "‚úÖ C√°c file thay ƒë·ªïi sau khi chu·∫©n h√≥a: ${normalizedChanges.join(', ')}"

                    // Danh s√°ch c√°c d·ªãch v·ª• c√≥ s·∫µn
                    def services = [
                        "spring-petclinic-admin-server",
                        "spring-petclinic-api-gateway",
                        "spring-petclinic-config-server",
                        "spring-petclinic-customers-service",
                        "spring-petclinic-discovery-server",
                        "spring-petclinic-genai-service",
                        "spring-petclinic-vets-service",
                        "spring-petclinic-visits-service",
                    ]

                    // L·ªçc ra c√°c d·ªãch v·ª• c√≥ thay ƒë·ªïi
                    def changedServices = services.findAll { service ->
                        normalizedChanges.any { file ->
                            file.startsWith("${service}/") || file.contains("${service}/")
                        }
                    }

                    echo "üì¢ C√°c d·ªãch v·ª• thay ƒë·ªïi: ${changedServices.join(', ')}"

                    // N·∫øu kh√¥ng c√≥ d·ªãch v·ª• n√†o thay ƒë·ªïi, b·ªè qua b∆∞·ªõc build
                    if (changedServices.isEmpty()) {
                        echo "‚ÑπÔ∏è Kh√¥ng c√≥ d·ªãch v·ª• thay ƒë·ªïi. B·ªè qua test & build."
                        SERVICES_CHANGED = ""
                        return
                    }

                    // L∆∞u th√¥ng tin v·ªÅ c√°c d·ªãch v·ª• thay ƒë·ªïi v√†o properties c·ªßa pipeline
                    properties([
                        parameters([
                            string(name: 'SERVICES_CHANGED', defaultValue: changedServices.join(','), description: 'C√°c d·ªãch v·ª• thay ƒë·ªïi trong build n√†y')
                        ])
                    ])

                    SERVICES_CHANGED = changedServices.join(',')
                    echo "üöÄ D·ªãch v·ª• thay ƒë·ªïi (To√†n b·ªô m√¥i tr∆∞·ªùng): ${SERVICES_CHANGED}"
                }
            }
        }
        
        stage('Build (Maven)') {
            when {
                expression { SERVICES_CHANGED?.trim() != "" }
            }
            steps {
                script {
                    def servicesList = SERVICES_CHANGED.tokenize(',')

                    if (servicesList.isEmpty()) {
                        echo "‚ÑπÔ∏è Kh√¥ng c√≥ d·ªãch v·ª• thay ƒë·ªïi. B·ªè qua build."
                        return
                    }

                    // Build t·ª´ng d·ªãch v·ª• thay ƒë·ªïi b·∫±ng Maven
                    for (service in servicesList) {
                        echo "üèóÔ∏è ƒêang build ${service}..."
                        dir(service) {
                            sh '../mvnw package -DskipTests -T 1C'
                        }
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            when {
                expression { SERVICES_CHANGED?.trim() != "" }
            }
            steps {
                script {
                    def servicesList = SERVICES_CHANGED.tokenize(',')

                    if (servicesList.isEmpty()) {
                        error("‚ùå Kh√¥ng c√≥ d·ªãch v·ª• thay ƒë·ªïi. Ki·ªÉm tra l·∫°i b∆∞·ªõc 'Detect Changes'.")
                    }

                    // Danh s√°ch c·ªïng cho t·ª´ng d·ªãch v·ª•
                    def servicePorts = [
                        "spring-petclinic-admin-server": 9090,
                        "spring-petclinic-api-gateway": 8080,
                        "spring-petclinic-config-server": 8888,
                        "spring-petclinic-customers-service": 8081,
                        "spring-petclinic-discovery-server": 8761,
                        "spring-petclinic-genai-service": 8084,
                        "spring-petpetclinic-vets-service": 8083,
                        "spring-petclinic-visits-service": 8082
                    ]

                    // ƒêƒÉng nh·∫≠p Docker Hub m·ªôt l·∫ßn tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu build
                    withCredentials([usernamePassword(
                        credentialsId: 'docker_hub_PAT',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        echo "üîê ƒêƒÉng nh·∫≠p v√†o Docker Hub..."
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    }

                    // Build v√† push Docker image cho t·ª´ng d·ªãch v·ª• thay ƒë·ªïi
                    for (service in servicesList) {
                        echo "üê≥ ƒêang build & push Docker image cho ${service}..."

                        // L·∫•y t√™n d·ªãch v·ª• ng·∫Øn
                        def shortServiceName = service.replaceFirst("spring-petclinic-", "")
                        
                        // L·∫•y c·ªïng c·ªßa d·ªãch v·ª•
                        def servicePort = servicePorts.get(service, 8080)
                        
                        // L·∫•y commit hash
                        def commitHash = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                        def imageTag = "hzeroxium/${service}:${commitHash}"

                        sh """
                        docker build \\
                            --build-arg SERVICE_NAME=${shortServiceName} \\
                            --build-arg EXPOSED_PORT=${servicePort} \\
                            -f Dockerfile \\
                            -t ${imageTag} \\
                            -t hzeroxium/${service}:latest \\
                            .
                        docker push ${imageTag}
                        docker push hzeroxium/${service}:latest
                        docker rmi ${imageTag} || true
                        docker rmi hzeroxium/${service}:latest || true
                        """
                    }
                }
            }
        }

        // stage('Update GitOps Repository') {
        //     when {
        //         expression { SERVICES_CHANGED?.trim() != "" }
        //     }
        //     steps {
        //         script {
        //             def servicesList = SERVICES_CHANGED.tokenize(',')
        //             def commitHash = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()

        //             sh "rm -rf spring-petclinic-microservices-config || true"
                    
        //             withCredentials([usernamePassword(
        //                 credentialsId: 'github-credentials', 
        //                 usernameVariable: 'GIT_USERNAME', 
        //                 passwordVariable: 'GIT_PASSWORD'
        //             )]) {
        //                 sh """
        //                 git clone https://\${GIT_USERNAME}:\${GIT_PASSWORD}@github.com/HZeroxium/spring-petclinic-microservices-config.git
        //                 """
                        
        //                 dir('spring-petclinic-microservices-config') {
        //                     for (service in servicesList) {
        //                         def shortServiceName = service.replaceFirst("spring-petclinic-", "")
        //                         def valuesFile = "values/dev/values-${shortServiceName}.yaml"
                                
        //                         sh """
        //                         if [ -f "${valuesFile}" ]; then
        //                             echo "C·∫≠p nh·∫≠t tag image trong ${valuesFile}"
        //                             sed -i 's/\\(tag:\\s*\\).*/\\1"'${commitHash}'"/' ${valuesFile}
        //                         else
        //                             echo "C·∫£nh b√°o: ${valuesFile} kh√¥ng t√¨m th·∫•y"
        //                         fi
        //                         """
        //                     }
                            
        //                     sh """
        //                     git config user.email "jenkins@example.com"
        //                     git config user.name "Jenkins CI"
        //                     git status
                            
        //                     if ! git diff --quiet; then
        //                         git add .
        //                         git commit -m "C·∫≠p nh·∫≠t tag image cho ${SERVICES_CHANGED} th√†nh ${commitHash}"
        //                         git push
        //                         echo "‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng repository GitOps"
        //                     else
        //                         echo "‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o c·∫ßn commit trong repository GitOps"
        //                     fi
        //                     """
        //                 }
        //             }
                    
        //             sh "rm -rf spring-petclinic-microservices-config || true"
        //         }
        //     }
        // }
    }

    post {
        failure {
            script {
                echo "‚ùå Pipeline CI/CD th·∫•t b·∫°i!"
            }
        }
        success {
            script {
                echo "‚úÖ Pipeline CI/CD th√†nh c√¥ng!"
            }
        }
        always {
            echo "‚úÖ Pipeline ho√†n th√†nh cho c√°c d·ªãch v·ª•: ${SERVICES_CHANGED}"
        }
    }
}
